#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace kurscachWPF
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="BuyvolovKR")]
	public partial class kursachWPFDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Определения метода расширяемости
    partial void OnCreated();
    partial void Insertapplicant(applicant instance);
    partial void Updateapplicant(applicant instance);
    partial void Deleteapplicant(applicant instance);
    partial void Insertorg(org instance);
    partial void Updateorg(org instance);
    partial void Deleteorg(org instance);
    partial void InsertR(R instance);
    partial void UpdateR(R instance);
    partial void DeleteR(R instance);
    partial void InsertR1(R1 instance);
    partial void UpdateR1(R1 instance);
    partial void DeleteR1(R1 instance);
    partial void Insertvacancies(vacancies instance);
    partial void Updatevacancies(vacancies instance);
    partial void Deletevacancies(vacancies instance);
    partial void InsertR2(R2 instance);
    partial void UpdateR2(R2 instance);
    partial void DeleteR2(R2 instance);
    partial void InsertREG(REG instance);
    partial void UpdateREG(REG instance);
    partial void DeleteREG(REG instance);
    partial void Insertfinal(final instance);
    partial void Updatefinal(final instance);
    partial void Deletefinal(final instance);
    #endregion
		
		public kursachWPFDataContext() : 
				base(global::kurscachWPF.Properties.Settings.Default.BuyvolovKRConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public kursachWPFDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public kursachWPFDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public kursachWPFDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public kursachWPFDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<applicant> applicant
		{
			get
			{
				return this.GetTable<applicant>();
			}
		}
		
		public System.Data.Linq.Table<org> org
		{
			get
			{
				return this.GetTable<org>();
			}
		}
		
		public System.Data.Linq.Table<R> R
		{
			get
			{
				return this.GetTable<R>();
			}
		}
		
		public System.Data.Linq.Table<R1> R1
		{
			get
			{
				return this.GetTable<R1>();
			}
		}
		
		public System.Data.Linq.Table<vacancies> vacancies
		{
			get
			{
				return this.GetTable<vacancies>();
			}
		}
		
		public System.Data.Linq.Table<R2> R2
		{
			get
			{
				return this.GetTable<R2>();
			}
		}
		
		public System.Data.Linq.Table<REG> REG
		{
			get
			{
				return this.GetTable<REG>();
			}
		}
		
		public System.Data.Linq.Table<final> final
		{
			get
			{
				return this.GetTable<final>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.applicant")]
	public partial class applicant : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _FIO;
		
		private string _position;
		
		private System.Nullable<int> _salary;
		
		private System.Nullable<int> _idapplicant;
		
		private string _Info;
		
		private System.Nullable<bool> _hired;
		
		private EntitySet<R> _R;
		
		private EntitySet<R2> _R2;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFIOChanging(string value);
    partial void OnFIOChanged();
    partial void OnpositionChanging(string value);
    partial void OnpositionChanged();
    partial void OnsalaryChanging(System.Nullable<int> value);
    partial void OnsalaryChanged();
    partial void OnidapplicantChanging(System.Nullable<int> value);
    partial void OnidapplicantChanged();
    partial void OnInfoChanging(string value);
    partial void OnInfoChanged();
    partial void OnhiredChanging(System.Nullable<bool> value);
    partial void OnhiredChanged();
    #endregion
		
		public applicant()
		{
			this._R = new EntitySet<R>(new Action<R>(this.attach_R), new Action<R>(this.detach_R));
			this._R2 = new EntitySet<R2>(new Action<R2>(this.attach_R2), new Action<R2>(this.detach_R2));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FIO", DbType="NVarChar(20)")]
		public string FIO
		{
			get
			{
				return this._FIO;
			}
			set
			{
				if ((this._FIO != value))
				{
					this.OnFIOChanging(value);
					this.SendPropertyChanging();
					this._FIO = value;
					this.SendPropertyChanged("FIO");
					this.OnFIOChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_position", DbType="NVarChar(30)")]
		public string position
		{
			get
			{
				return this._position;
			}
			set
			{
				if ((this._position != value))
				{
					this.OnpositionChanging(value);
					this.SendPropertyChanging();
					this._position = value;
					this.SendPropertyChanged("position");
					this.OnpositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_salary", DbType="Int")]
		public System.Nullable<int> salary
		{
			get
			{
				return this._salary;
			}
			set
			{
				if ((this._salary != value))
				{
					this.OnsalaryChanging(value);
					this.SendPropertyChanging();
					this._salary = value;
					this.SendPropertyChanged("salary");
					this.OnsalaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idapplicant", DbType="Int", IsPrimaryKey=true)]
		public System.Nullable<int> idapplicant
		{
			get
			{
				return this._idapplicant;
			}
			set
			{
				if ((this._idapplicant != value))
				{
					this.OnidapplicantChanging(value);
					this.SendPropertyChanging();
					this._idapplicant = value;
					this.SendPropertyChanged("idapplicant");
					this.OnidapplicantChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Info", DbType="NVarChar(100)")]
		public string Info
		{
			get
			{
				return this._Info;
			}
			set
			{
				if ((this._Info != value))
				{
					this.OnInfoChanging(value);
					this.SendPropertyChanging();
					this._Info = value;
					this.SendPropertyChanged("Info");
					this.OnInfoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_hired", DbType="Bit")]
		public System.Nullable<bool> hired
		{
			get
			{
				return this._hired;
			}
			set
			{
				if ((this._hired != value))
				{
					this.OnhiredChanging(value);
					this.SendPropertyChanging();
					this._hired = value;
					this.SendPropertyChanged("hired");
					this.OnhiredChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="applicant_R", Storage="_R", ThisKey="idapplicant", OtherKey="Idapplicant")]
		public EntitySet<R> R
		{
			get
			{
				return this._R;
			}
			set
			{
				this._R.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="applicant_R2", Storage="_R2", ThisKey="idapplicant", OtherKey="Idapplicant")]
		public EntitySet<R2> R2
		{
			get
			{
				return this._R2;
			}
			set
			{
				this._R2.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_R(R entity)
		{
			this.SendPropertyChanging();
			entity.applicant = this;
		}
		
		private void detach_R(R entity)
		{
			this.SendPropertyChanging();
			entity.applicant = null;
		}
		
		private void attach_R2(R2 entity)
		{
			this.SendPropertyChanging();
			entity.applicant = this;
		}
		
		private void detach_R2(R2 entity)
		{
			this.SendPropertyChanging();
			entity.applicant = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.org")]
	public partial class org : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Nullable<int> _Idorg;
		
		private string _orgname;
		
		private EntitySet<R1> _R1;
		
		private EntitySet<R2> _R2;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdorgChanging(System.Nullable<int> value);
    partial void OnIdorgChanged();
    partial void OnorgnameChanging(string value);
    partial void OnorgnameChanged();
    #endregion
		
		public org()
		{
			this._R1 = new EntitySet<R1>(new Action<R1>(this.attach_R1), new Action<R1>(this.detach_R1));
			this._R2 = new EntitySet<R2>(new Action<R2>(this.attach_R2), new Action<R2>(this.detach_R2));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Idorg", DbType="Int", IsPrimaryKey=true)]
		public System.Nullable<int> Idorg
		{
			get
			{
				return this._Idorg;
			}
			set
			{
				if ((this._Idorg != value))
				{
					this.OnIdorgChanging(value);
					this.SendPropertyChanging();
					this._Idorg = value;
					this.SendPropertyChanged("Idorg");
					this.OnIdorgChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_orgname", DbType="NVarChar(30)")]
		public string orgname
		{
			get
			{
				return this._orgname;
			}
			set
			{
				if ((this._orgname != value))
				{
					this.OnorgnameChanging(value);
					this.SendPropertyChanging();
					this._orgname = value;
					this.SendPropertyChanged("orgname");
					this.OnorgnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="org_R1", Storage="_R1", ThisKey="Idorg", OtherKey="Idorg")]
		public EntitySet<R1> R1
		{
			get
			{
				return this._R1;
			}
			set
			{
				this._R1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="org_R2", Storage="_R2", ThisKey="Idorg", OtherKey="Idorg")]
		public EntitySet<R2> R2
		{
			get
			{
				return this._R2;
			}
			set
			{
				this._R2.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_R1(R1 entity)
		{
			this.SendPropertyChanging();
			entity.org = this;
		}
		
		private void detach_R1(R1 entity)
		{
			this.SendPropertyChanging();
			entity.org = null;
		}
		
		private void attach_R2(R2 entity)
		{
			this.SendPropertyChanging();
			entity.org = this;
		}
		
		private void detach_R2(R2 entity)
		{
			this.SendPropertyChanging();
			entity.org = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.R")]
	public partial class R : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Nullable<int> _Idvacant;
		
		private System.Nullable<int> _Idapplicant;
		
		private EntityRef<vacancies> _vacancies;
		
		private EntityRef<applicant> _applicant;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdvacantChanging(System.Nullable<int> value);
    partial void OnIdvacantChanged();
    partial void OnIdapplicantChanging(System.Nullable<int> value);
    partial void OnIdapplicantChanged();
    #endregion
		
		public R()
		{
			this._vacancies = default(EntityRef<vacancies>);
			this._applicant = default(EntityRef<applicant>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Idvacant", DbType="Int", IsPrimaryKey=true)]
		public System.Nullable<int> Idvacant
		{
			get
			{
				return this._Idvacant;
			}
			set
			{
				if ((this._Idvacant != value))
				{
					if (this._vacancies.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdvacantChanging(value);
					this.SendPropertyChanging();
					this._Idvacant = value;
					this.SendPropertyChanged("Idvacant");
					this.OnIdvacantChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Idapplicant", DbType="Int", IsPrimaryKey=true)]
		public System.Nullable<int> Idapplicant
		{
			get
			{
				return this._Idapplicant;
			}
			set
			{
				if ((this._Idapplicant != value))
				{
					if (this._applicant.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdapplicantChanging(value);
					this.SendPropertyChanging();
					this._Idapplicant = value;
					this.SendPropertyChanged("Idapplicant");
					this.OnIdapplicantChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="vacancies_R", Storage="_vacancies", ThisKey="Idvacant", OtherKey="Idvacant", IsForeignKey=true)]
		public vacancies vacancies
		{
			get
			{
				return this._vacancies.Entity;
			}
			set
			{
				vacancies previousValue = this._vacancies.Entity;
				if (((previousValue != value) 
							|| (this._vacancies.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._vacancies.Entity = null;
						previousValue.R.Remove(this);
					}
					this._vacancies.Entity = value;
					if ((value != null))
					{
						value.R.Add(this);
						this._Idvacant = value.Idvacant;
					}
					else
					{
						this._Idvacant = default(Nullable<int>);
					}
					this.SendPropertyChanged("vacancies");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="applicant_R", Storage="_applicant", ThisKey="Idapplicant", OtherKey="idapplicant", IsForeignKey=true)]
		public applicant applicant
		{
			get
			{
				return this._applicant.Entity;
			}
			set
			{
				applicant previousValue = this._applicant.Entity;
				if (((previousValue != value) 
							|| (this._applicant.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._applicant.Entity = null;
						previousValue.R.Remove(this);
					}
					this._applicant.Entity = value;
					if ((value != null))
					{
						value.R.Add(this);
						this._Idapplicant = value.idapplicant;
					}
					else
					{
						this._Idapplicant = default(Nullable<int>);
					}
					this.SendPropertyChanged("applicant");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.R1")]
	public partial class R1 : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Nullable<int> _Idvacant;
		
		private System.Nullable<int> _Idorg;
		
		private EntityRef<org> _org;
		
		private EntityRef<vacancies> _vacancies;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdvacantChanging(System.Nullable<int> value);
    partial void OnIdvacantChanged();
    partial void OnIdorgChanging(System.Nullable<int> value);
    partial void OnIdorgChanged();
    #endregion
		
		public R1()
		{
			this._org = default(EntityRef<org>);
			this._vacancies = default(EntityRef<vacancies>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Idvacant", DbType="Int", IsPrimaryKey=true)]
		public System.Nullable<int> Idvacant
		{
			get
			{
				return this._Idvacant;
			}
			set
			{
				if ((this._Idvacant != value))
				{
					if (this._vacancies.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdvacantChanging(value);
					this.SendPropertyChanging();
					this._Idvacant = value;
					this.SendPropertyChanged("Idvacant");
					this.OnIdvacantChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Idorg", DbType="Int", IsPrimaryKey=true)]
		public System.Nullable<int> Idorg
		{
			get
			{
				return this._Idorg;
			}
			set
			{
				if ((this._Idorg != value))
				{
					if (this._org.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdorgChanging(value);
					this.SendPropertyChanging();
					this._Idorg = value;
					this.SendPropertyChanged("Idorg");
					this.OnIdorgChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="org_R1", Storage="_org", ThisKey="Idorg", OtherKey="Idorg", IsForeignKey=true)]
		public org org
		{
			get
			{
				return this._org.Entity;
			}
			set
			{
				org previousValue = this._org.Entity;
				if (((previousValue != value) 
							|| (this._org.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._org.Entity = null;
						previousValue.R1.Remove(this);
					}
					this._org.Entity = value;
					if ((value != null))
					{
						value.R1.Add(this);
						this._Idorg = value.Idorg;
					}
					else
					{
						this._Idorg = default(Nullable<int>);
					}
					this.SendPropertyChanged("org");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="vacancies_R1", Storage="_vacancies", ThisKey="Idvacant", OtherKey="Idvacant", IsForeignKey=true)]
		public vacancies vacancies
		{
			get
			{
				return this._vacancies.Entity;
			}
			set
			{
				vacancies previousValue = this._vacancies.Entity;
				if (((previousValue != value) 
							|| (this._vacancies.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._vacancies.Entity = null;
						previousValue.R1.Remove(this);
					}
					this._vacancies.Entity = value;
					if ((value != null))
					{
						value.R1.Add(this);
						this._Idvacant = value.Idvacant;
					}
					else
					{
						this._Idvacant = default(Nullable<int>);
					}
					this.SendPropertyChanged("vacancies");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.vacancies")]
	public partial class vacancies : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _position;
		
		private System.Nullable<int> _salary;
		
		private System.Nullable<int> _Idvacant;
		
		private System.Nullable<System.DateTime> _dateopen;
		
		private System.Nullable<System.DateTime> _dateclose;
		
		private EntitySet<R> _R;
		
		private EntitySet<R1> _R1;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnpositionChanging(string value);
    partial void OnpositionChanged();
    partial void OnsalaryChanging(System.Nullable<int> value);
    partial void OnsalaryChanged();
    partial void OnIdvacantChanging(System.Nullable<int> value);
    partial void OnIdvacantChanged();
    partial void OndateopenChanging(System.Nullable<System.DateTime> value);
    partial void OndateopenChanged();
    partial void OndatecloseChanging(System.Nullable<System.DateTime> value);
    partial void OndatecloseChanged();
    #endregion
		
		public vacancies()
		{
			this._R = new EntitySet<R>(new Action<R>(this.attach_R), new Action<R>(this.detach_R));
			this._R1 = new EntitySet<R1>(new Action<R1>(this.attach_R1), new Action<R1>(this.detach_R1));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_position", DbType="NVarChar(30)")]
		public string position
		{
			get
			{
				return this._position;
			}
			set
			{
				if ((this._position != value))
				{
					this.OnpositionChanging(value);
					this.SendPropertyChanging();
					this._position = value;
					this.SendPropertyChanged("position");
					this.OnpositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_salary", DbType="Int")]
		public System.Nullable<int> salary
		{
			get
			{
				return this._salary;
			}
			set
			{
				if ((this._salary != value))
				{
					this.OnsalaryChanging(value);
					this.SendPropertyChanging();
					this._salary = value;
					this.SendPropertyChanged("salary");
					this.OnsalaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Idvacant", DbType="Int", IsPrimaryKey=true)]
		public System.Nullable<int> Idvacant
		{
			get
			{
				return this._Idvacant;
			}
			set
			{
				if ((this._Idvacant != value))
				{
					this.OnIdvacantChanging(value);
					this.SendPropertyChanging();
					this._Idvacant = value;
					this.SendPropertyChanged("Idvacant");
					this.OnIdvacantChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateopen", DbType="DateTime")]
		public System.Nullable<System.DateTime> dateopen
		{
			get
			{
				return this._dateopen;
			}
			set
			{
				if ((this._dateopen != value))
				{
					this.OndateopenChanging(value);
					this.SendPropertyChanging();
					this._dateopen = value;
					this.SendPropertyChanged("dateopen");
					this.OndateopenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateclose", DbType="DateTime")]
		public System.Nullable<System.DateTime> dateclose
		{
			get
			{
				return this._dateclose;
			}
			set
			{
				if ((this._dateclose != value))
				{
					this.OndatecloseChanging(value);
					this.SendPropertyChanging();
					this._dateclose = value;
					this.SendPropertyChanged("dateclose");
					this.OndatecloseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="vacancies_R", Storage="_R", ThisKey="Idvacant", OtherKey="Idvacant")]
		public EntitySet<R> R
		{
			get
			{
				return this._R;
			}
			set
			{
				this._R.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="vacancies_R1", Storage="_R1", ThisKey="Idvacant", OtherKey="Idvacant")]
		public EntitySet<R1> R1
		{
			get
			{
				return this._R1;
			}
			set
			{
				this._R1.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_R(R entity)
		{
			this.SendPropertyChanging();
			entity.vacancies = this;
		}
		
		private void detach_R(R entity)
		{
			this.SendPropertyChanging();
			entity.vacancies = null;
		}
		
		private void attach_R1(R1 entity)
		{
			this.SendPropertyChanging();
			entity.vacancies = this;
		}
		
		private void detach_R1(R1 entity)
		{
			this.SendPropertyChanging();
			entity.vacancies = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.R2")]
	public partial class R2 : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Nullable<int> _Idorg;
		
		private System.Nullable<int> _Idapplicant;
		
		private EntityRef<org> _org;
		
		private EntityRef<applicant> _applicant;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdorgChanging(System.Nullable<int> value);
    partial void OnIdorgChanged();
    partial void OnIdapplicantChanging(System.Nullable<int> value);
    partial void OnIdapplicantChanged();
    #endregion
		
		public R2()
		{
			this._org = default(EntityRef<org>);
			this._applicant = default(EntityRef<applicant>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Idorg", DbType="Int", IsPrimaryKey=true)]
		public System.Nullable<int> Idorg
		{
			get
			{
				return this._Idorg;
			}
			set
			{
				if ((this._Idorg != value))
				{
					if (this._org.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdorgChanging(value);
					this.SendPropertyChanging();
					this._Idorg = value;
					this.SendPropertyChanged("Idorg");
					this.OnIdorgChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Idapplicant", DbType="Int", IsPrimaryKey=true)]
		public System.Nullable<int> Idapplicant
		{
			get
			{
				return this._Idapplicant;
			}
			set
			{
				if ((this._Idapplicant != value))
				{
					if (this._applicant.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdapplicantChanging(value);
					this.SendPropertyChanging();
					this._Idapplicant = value;
					this.SendPropertyChanged("Idapplicant");
					this.OnIdapplicantChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="org_R2", Storage="_org", ThisKey="Idorg", OtherKey="Idorg", IsForeignKey=true)]
		public org org
		{
			get
			{
				return this._org.Entity;
			}
			set
			{
				org previousValue = this._org.Entity;
				if (((previousValue != value) 
							|| (this._org.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._org.Entity = null;
						previousValue.R2.Remove(this);
					}
					this._org.Entity = value;
					if ((value != null))
					{
						value.R2.Add(this);
						this._Idorg = value.Idorg;
					}
					else
					{
						this._Idorg = default(Nullable<int>);
					}
					this.SendPropertyChanged("org");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="applicant_R2", Storage="_applicant", ThisKey="Idapplicant", OtherKey="idapplicant", IsForeignKey=true)]
		public applicant applicant
		{
			get
			{
				return this._applicant.Entity;
			}
			set
			{
				applicant previousValue = this._applicant.Entity;
				if (((previousValue != value) 
							|| (this._applicant.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._applicant.Entity = null;
						previousValue.R2.Remove(this);
					}
					this._applicant.Entity = value;
					if ((value != null))
					{
						value.R2.Add(this);
						this._Idapplicant = value.idapplicant;
					}
					else
					{
						this._Idapplicant = default(Nullable<int>);
					}
					this.SendPropertyChanged("applicant");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.REG")]
	public partial class REG : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Login;
		
		private string _Password;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLoginChanging(string value);
    partial void OnLoginChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    #endregion
		
		public REG()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Login", DbType="NChar(40) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Login
		{
			get
			{
				return this._Login;
			}
			set
			{
				if ((this._Login != value))
				{
					this.OnLoginChanging(value);
					this.SendPropertyChanging();
					this._Login = value;
					this.SendPropertyChanged("Login");
					this.OnLoginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NChar(40) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.final")]
	public partial class final : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _FIO;
		
		private string _position;
		
		private System.Nullable<int> _salary;
		
		private string _Info;
		
		private string _orgname;
		
		private System.Nullable<System.DateTime> _dateopen;
		
		private System.Nullable<System.DateTime> _dateclose;
		
		private int _id;
		
		private string _accepted;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFIOChanging(string value);
    partial void OnFIOChanged();
    partial void OnpositionChanging(string value);
    partial void OnpositionChanged();
    partial void OnsalaryChanging(System.Nullable<int> value);
    partial void OnsalaryChanged();
    partial void OnInfoChanging(string value);
    partial void OnInfoChanged();
    partial void OnorgnameChanging(string value);
    partial void OnorgnameChanged();
    partial void OndateopenChanging(System.Nullable<System.DateTime> value);
    partial void OndateopenChanged();
    partial void OndatecloseChanging(System.Nullable<System.DateTime> value);
    partial void OndatecloseChanged();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnacceptedChanging(string value);
    partial void OnacceptedChanged();
    #endregion
		
		public final()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FIO", DbType="NVarChar(20)")]
		public string FIO
		{
			get
			{
				return this._FIO;
			}
			set
			{
				if ((this._FIO != value))
				{
					this.OnFIOChanging(value);
					this.SendPropertyChanging();
					this._FIO = value;
					this.SendPropertyChanged("FIO");
					this.OnFIOChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_position", DbType="NVarChar(30)")]
		public string position
		{
			get
			{
				return this._position;
			}
			set
			{
				if ((this._position != value))
				{
					this.OnpositionChanging(value);
					this.SendPropertyChanging();
					this._position = value;
					this.SendPropertyChanged("position");
					this.OnpositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_salary", DbType="Int")]
		public System.Nullable<int> salary
		{
			get
			{
				return this._salary;
			}
			set
			{
				if ((this._salary != value))
				{
					this.OnsalaryChanging(value);
					this.SendPropertyChanging();
					this._salary = value;
					this.SendPropertyChanged("salary");
					this.OnsalaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Info", DbType="NVarChar(100)")]
		public string Info
		{
			get
			{
				return this._Info;
			}
			set
			{
				if ((this._Info != value))
				{
					this.OnInfoChanging(value);
					this.SendPropertyChanging();
					this._Info = value;
					this.SendPropertyChanged("Info");
					this.OnInfoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_orgname", DbType="NVarChar(30)")]
		public string orgname
		{
			get
			{
				return this._orgname;
			}
			set
			{
				if ((this._orgname != value))
				{
					this.OnorgnameChanging(value);
					this.SendPropertyChanging();
					this._orgname = value;
					this.SendPropertyChanged("orgname");
					this.OnorgnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateopen", DbType="DateTime")]
		public System.Nullable<System.DateTime> dateopen
		{
			get
			{
				return this._dateopen;
			}
			set
			{
				if ((this._dateopen != value))
				{
					this.OndateopenChanging(value);
					this.SendPropertyChanging();
					this._dateopen = value;
					this.SendPropertyChanged("dateopen");
					this.OndateopenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateclose", DbType="DateTime")]
		public System.Nullable<System.DateTime> dateclose
		{
			get
			{
				return this._dateclose;
			}
			set
			{
				if ((this._dateclose != value))
				{
					this.OndatecloseChanging(value);
					this.SendPropertyChanging();
					this._dateclose = value;
					this.SendPropertyChanged("dateclose");
					this.OndatecloseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_accepted", DbType="NChar(20)")]
		public string accepted
		{
			get
			{
				return this._accepted;
			}
			set
			{
				if ((this._accepted != value))
				{
					this.OnacceptedChanging(value);
					this.SendPropertyChanging();
					this._accepted = value;
					this.SendPropertyChanged("accepted");
					this.OnacceptedChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
